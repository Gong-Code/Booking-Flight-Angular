{"ast":null,"code":"/* tslint:disable */\n/* eslint-disable */\nimport { HttpResponse } from '@angular/common/http';\nimport { filter, map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { RequestBuilder } from '../request-builder';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class FlightService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `searchFlight()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchFlight$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchFlight$Plain$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, FlightService.SearchFlightPath, 'get');\n    if (params) {\n      rb.query('FromDate', params.FromDate, {});\n      rb.query('ToDate', params.ToDate, {});\n      rb.query('From', params.From, {});\n      rb.query('Destination', params.Destination, {});\n      rb.query('NumberOfPassengers', params.NumberOfPassengers, {});\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: 'text/plain',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchFlight$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchFlight$Plain(params, context) {\n    return this.searchFlight$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchFlight()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchFlight$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, FlightService.SearchFlightPath, 'get');\n    if (params) {\n      rb.query('FromDate', params.FromDate, {});\n      rb.query('ToDate', params.ToDate, {});\n      rb.query('From', params.From, {});\n      rb.query('Destination', params.Destination, {});\n      rb.query('NumberOfPassengers', params.NumberOfPassengers, {});\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'text/json',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchFlight$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchFlight(params, context) {\n    return this.searchFlight$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `bookFlight()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `bookFlight()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  bookFlight$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, FlightService.BookFlightPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/*+json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r.clone({\n        body: undefined\n      });\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `bookFlight$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  bookFlight(params, context) {\n    return this.bookFlight$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `findFlight()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findFlight$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findFlight$Plain$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, FlightService.FindFlightPath, 'get');\n    if (params) {\n      rb.path('id', params.id, {});\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: 'text/plain',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findFlight$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findFlight$Plain(params, context) {\n    return this.findFlight$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findFlight()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findFlight$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, FlightService.FindFlightPath, 'get');\n    if (params) {\n      rb.path('id', params.id, {});\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'text/json',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findFlight$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findFlight(params, context) {\n    return this.findFlight$Response(params, context).pipe(map(r => r.body));\n  }\n}\nFlightService.SearchFlightPath = '/Flight';\nFlightService.BookFlightPath = '/Flight';\nFlightService.FindFlightPath = '/Flight/{id}';\nFlightService.ɵfac = function FlightService_Factory(t) {\n  return new (t || FlightService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\nFlightService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FlightService,\n  factory: FlightService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpResponse","filter","map","BaseService","RequestBuilder","FlightService","constructor","config","http","searchFlight$Plain$Response","params","context","rb","rootUrl","SearchFlightPath","query","FromDate","ToDate","From","Destination","NumberOfPassengers","request","build","responseType","accept","pipe","r","searchFlight$Plain","body","searchFlight$Response","searchFlight","bookFlight$Response","BookFlightPath","clone","undefined","bookFlight","findFlight$Plain$Response","FindFlightPath","path","id","findFlight$Plain","findFlight$Response","findFlight","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\gongm\\source\\repos\\Flights\\Flights\\ClientApp\\src\\app\\api\\services\\flight.service.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\n\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\nimport { RequestBuilder } from '../request-builder';\r\n\r\nimport { BookDto } from '../models/book-dto';\r\nimport { FlightRm } from '../models/flight-rm';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class FlightService extends BaseService {\r\n  constructor(config: ApiConfiguration, http: HttpClient) {\r\n    super(config, http);\r\n  }\r\n\r\n  /** Path part for operation `searchFlight()` */\r\n  static readonly SearchFlightPath = '/Flight';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchFlight$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchFlight$Plain$Response(\r\n    params?: {\r\n      FromDate?: string;\r\n      ToDate?: string;\r\n      From?: string;\r\n      Destination?: string;\r\n      NumberOfPassengers?: number;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<Array<FlightRm>>> {\r\n    const rb = new RequestBuilder(this.rootUrl, FlightService.SearchFlightPath, 'get');\r\n    if (params) {\r\n      rb.query('FromDate', params.FromDate, {});\r\n      rb.query('ToDate', params.ToDate, {});\r\n      rb.query('From', params.From, {});\r\n      rb.query('Destination', params.Destination, {});\r\n      rb.query('NumberOfPassengers', params.NumberOfPassengers, {});\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'text', accept: 'text/plain', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<FlightRm>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchFlight$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchFlight$Plain(\r\n    params?: {\r\n      FromDate?: string;\r\n      ToDate?: string;\r\n      From?: string;\r\n      Destination?: string;\r\n      NumberOfPassengers?: number;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<Array<FlightRm>> {\r\n    return this.searchFlight$Plain$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<FlightRm>>): Array<FlightRm> => r.body)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchFlight()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchFlight$Response(\r\n    params?: {\r\n      FromDate?: string;\r\n      ToDate?: string;\r\n      From?: string;\r\n      Destination?: string;\r\n      NumberOfPassengers?: number;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<Array<FlightRm>>> {\r\n    const rb = new RequestBuilder(this.rootUrl, FlightService.SearchFlightPath, 'get');\r\n    if (params) {\r\n      rb.query('FromDate', params.FromDate, {});\r\n      rb.query('ToDate', params.ToDate, {});\r\n      rb.query('From', params.From, {});\r\n      rb.query('Destination', params.Destination, {});\r\n      rb.query('NumberOfPassengers', params.NumberOfPassengers, {});\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'json', accept: 'text/json', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<FlightRm>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchFlight$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchFlight(\r\n    params?: {\r\n      FromDate?: string;\r\n      ToDate?: string;\r\n      From?: string;\r\n      Destination?: string;\r\n      NumberOfPassengers?: number;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<Array<FlightRm>> {\r\n    return this.searchFlight$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<FlightRm>>): Array<FlightRm> => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `bookFlight()` */\r\n  static readonly BookFlightPath = '/Flight';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `bookFlight()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  bookFlight$Response(\r\n    params?: {\r\n      body?: BookDto\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<void>> {\r\n    const rb = new RequestBuilder(this.rootUrl, FlightService.BookFlightPath, 'post');\r\n    if (params) {\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'text', accept: '*/*', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `bookFlight$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  bookFlight(\r\n    params?: {\r\n      body?: BookDto\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<void> {\r\n    return this.bookFlight$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<void>): void => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `findFlight()` */\r\n  static readonly FindFlightPath = '/Flight/{id}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findFlight$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findFlight$Plain$Response(\r\n    params: {\r\n      id: string;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<FlightRm>> {\r\n    const rb = new RequestBuilder(this.rootUrl, FlightService.FindFlightPath, 'get');\r\n    if (params) {\r\n      rb.path('id', params.id, {});\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'text', accept: 'text/plain', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<FlightRm>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findFlight$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findFlight$Plain(\r\n    params: {\r\n      id: string;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<FlightRm> {\r\n    return this.findFlight$Plain$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<FlightRm>): FlightRm => r.body)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findFlight()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findFlight$Response(\r\n    params: {\r\n      id: string;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<FlightRm>> {\r\n    const rb = new RequestBuilder(this.rootUrl, FlightService.FindFlightPath, 'get');\r\n    if (params) {\r\n      rb.path('id', params.id, {});\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'json', accept: 'text/json', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<FlightRm>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findFlight$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findFlight(\r\n    params: {\r\n      id: string;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<FlightRm> {\r\n    return this.findFlight$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<FlightRm>): FlightRm => r.body)\r\n    );\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}